import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'dart:async';
import 'package:fl_chart/fl_chart.dart';

void main() {
  runApp(const MyApp());
}

// Main Application
class MyApp extends StatelessWidget {
  const MyApp({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Digital Stethoscope',
      theme: ThemeData(
        primarySwatch: Colors.blue,
        visualDensity: VisualDensity.adaptivePlatformDensity,
      ),
      home: const HomePage(),
    );
  }
}

// Home Screen
class HomePage extends StatelessWidget {
  const HomePage({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Digital Stethoscope Home'),
        backgroundColor: Colors.blueAccent,
      ),
      body: Center(
        child: Padding(
          padding: const EdgeInsets.all(20.0),
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              const Text(
                'Digital Stethoscope Monitor',
                style: TextStyle(fontSize: 28, fontWeight: FontWeight.bold, color: Colors.blueAccent),
              ),
              const SizedBox(height: 20),
              Container(
                padding: const EdgeInsets.all(16),
                decoration: BoxDecoration(
                  color: Colors.blue.withOpacity(0.1),
                  borderRadius: BorderRadius.circular(12),
                ),
                child: const Text(
                  'Monitor heart sounds in real-time',
                  style: TextStyle(fontSize: 18, color: Colors.blueGrey),
                  textAlign: TextAlign.center,
                ),
              ),
              const SizedBox(height: 40),
              ClipRRect(
                borderRadius: BorderRadius.circular(20),
                child: Image.asset(
                  'assets/images/stethoscope.png',
                  height: 180,
                  width: 180,
                  fit: BoxFit.cover,
                ),
              ),
              const SizedBox(height: 50),
              ElevatedButton.icon(
                onPressed: () {
                  Navigator.push(
                    context,
                    MaterialPageRoute(builder: (context) => const VoltageFetcher()),
                  );
                },
                icon: const Icon(Icons.medical_services),
                label: const Text('Start Monitoring'),
                style: ElevatedButton.styleFrom(
                  backgroundColor: Colors.blueAccent,
                  padding: const EdgeInsets.symmetric(horizontal: 40, vertical: 15),
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(30),
                  ),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// Voltage Fetcher Screen
class VoltageFetcher extends StatefulWidget {
  const VoltageFetcher({Key? key}) : super(key: key);

  @override
  _VoltageFetcherState createState() => _VoltageFetcherState();
}

class _VoltageFetcherState extends State<VoltageFetcher> {
  final List<FlSpot> spots = [];
  String voltageDisplay = "Initializing...";
  double currentVoltage = 0.0;
  bool isConnected = false;
  bool isLoading = true;
  int timeStamp = 0;
  Timer? _pollTimer;
  bool _mounted = true;
  final String espAddress = '192.168.50.198'; // Change ESP32 IP if needed

  @override
  void initState() {
    super.initState();
    _checkConnection();
  }

  @override
  void dispose() {
    _mounted = false;
    _pollTimer?.cancel();
    super.dispose();
  }

  Future<void> _checkConnection() async {
    try {
      final response = await http.get(Uri.parse('http://$espAddress/voltage'))
          .timeout(const Duration(seconds: 5));
      if (response.statusCode == 200) {
        setState(() {
          isConnected = true;
          isLoading = false;
        });
        _startPolling();
      }
    } catch (e) {
      if (_mounted) {
        setState(() {
          isConnected = false;
          isLoading = false;
          voltageDisplay = "Connection failed";
        });
        _showConnectionError();
      }
    }
  }

  void _startPolling() {
    _pollTimer = Timer.periodic(const Duration(milliseconds: 100), (timer) {
      if (_mounted) {
        _fetchVoltage();
      }
    });
  }

  Future<void> _fetchVoltage() async {
    if (!_mounted) return;

    try {
      final response = await http.get(Uri.parse('http://$espAddress/voltage'));

      if (!_mounted) return;

      if (response.statusCode == 200) {
        try {
          final voltageStr = response.body.split('\n')[1].split(": ")[1];
          currentVoltage = double.parse(voltageStr.replaceAll(" V", ""));

          setState(() {
            voltageDisplay = "${currentVoltage.toStringAsFixed(3)} V";
            timeStamp++;

            if (spots.length > 100) spots.removeAt(0);
            spots.add(FlSpot(timeStamp.toDouble(), currentVoltage));

            isLoading = false;
            isConnected = true;
          });
        } catch (parseError) {
          setState(() {
            voltageDisplay = "Error parsing data";
            isLoading = false;
          });
        }
      }
    } catch (e) {
      if (!_mounted) return;
      setState(() {
        isConnected = false;
        voltageDisplay = "Connection lost";
        isLoading = false;
      });
    }
  }

  void _showConnectionError() {
    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(
        content: Text('Failed to connect to ESP32'),
        backgroundColor: Colors.red,
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Voltage Monitoring'),
        backgroundColor: Colors.blueAccent,
      ),
      body: Column(
        children: [
          const SizedBox(height: 20),
          Text(
            isLoading ? "Connecting..." : voltageDisplay,
            style: const TextStyle(fontSize: 24, fontWeight: FontWeight.bold),
          ),
          const SizedBox(height: 20),
          Expanded(
            child: Padding(
              padding: const EdgeInsets.all(16.0),
              child: LineChart(
                LineChartData(
                  minX: spots.isEmpty ? 0 : spots.first.x,
                  maxX: spots.isEmpty ? 10 : spots.last.x,
                  minY: 0,
                  maxY: 3.5,
                  lineBarsData: [
                    LineChartBarData(
                      spots: spots,
                      isCurved: true,
                      gradient: LinearGradient(
                        colors: [Colors.blue[400]!, Colors.blue[900]!],
                      ),
                      barWidth: 2,
                      isStrokeCapRound: true,
                    ),
                  ],
                ),
              ),
            ),
          ),
        ],
      ),
    );
  }
}
